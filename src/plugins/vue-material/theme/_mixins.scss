@use "sass:map";
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins";
@use "./custom-properties";
@use "./gss";
@use "./variables";

@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  :root {
    @include mixins.targets($feat-color) {
      @each $style in map.keys(variables.$property-values) {
        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};
      }
    }
  }

  @each $style in map.keys(variables.$property-values) {
    @if $style != 'background' and $style != 'surface' {
      .mdc-theme--#{$style} {
        @include mixins.targets($feat-color) {
          @include prop(color, $style, true);
        }
      }
    } @else {
      .mdc-theme--#{$style} {
        @include mixins.targets($feat-color) {
          @include prop(background-color, $style);
        }
      }
    }
  }
  @each $style in ('primary', 'secondary') {
    .mdc-theme--#{$style}-bg {
      @include mixins.targets($feat-color) {
        @include prop(background-color, $style, true);
      }
    }
  }
}

@mixin property($property, $value, $gss: (), $important: false) {
  $important-rule: if($important, '!important', '');

  @if custom-properties.is-custom-prop($value) {
    @include custom-properties.apply(
      $property,
      $value,
      $gss: $gss,
      $important: $important
    );
  } @else if map.has-key(variables.$property-values, $value) {
    $fallback: map.get(variables.$property-values, $value);
    $custom-prop: custom-properties.create(--mdc-theme-#{$style}, $fallback);
    @include custom-properties.apply(
      $property,
      $custom-prop,
      $gss: $gss,
      $important: $important
    );
  } @else {
    @include gss.annotate($gss);
    #{$property}: $value #{$important-rule};
  }
}
@mixin prop($property, $style, $important: false) {
  $important-rule: if($important, '!important', '');

  @if custom-properties.is-custom-prop($style) {
    @include custom-properties.apply($property, $style, $important: $important);
  } @else if variables.is-valid-theme-prop-value_($style) {
    #{$property}: $style #{$important-rule};
  } @else {
    @if not map.has-key(variables.$property-values, $style) {
      @error "Invalid style: '#{$style}'. Choose one of: #{map.keys(variables.$property-values)}";
    }
    $value: map.get(variables.$property-values, $style);

    #{$property}: $value #{$important-rule};
    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};
  }
}
