@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../theme/mixins" as theme-mixins;
@use "./functions";
@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-animation: feature-targeting-functions.create-target($query, animation);

  .mdc-line-ripple {
    @include feature-targeting-mixins.targets($feat-structure) {
      &::before,
      &::after {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        border-bottom-style: solid;
        content: "";
      }
      &::before {
        border-bottom-width: 1px;
        z-index: 1;
      }
      &::after {
        transform: scaleX(0);
        border-bottom-width: 2px;
        opacity: 0;
        z-index: 2;
      }
    }
    @include feature-targeting-mixins.targets($feat-animation) {
      &::after {
        transition: functions.transition-value(transform), functions.transition-value(opacity);
      }
    }
  }
  .mdc-line-ripple--active::after {
    @include feature-targeting-mixins.targets($feat-structure) {
      transform: scaleX(1);
      opacity: 1;
    }
  }
  .mdc-line-ripple--deactivating::after {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 0;
    }
  }
}
@mixin active-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    &::after {
      @include theme-mixins.prop(border-bottom-color, $color);
    }
  }
}
@mixin inactive-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    &::before {
      @include theme-mixins.prop(border-bottom-color, $color);
    }
  }
}
