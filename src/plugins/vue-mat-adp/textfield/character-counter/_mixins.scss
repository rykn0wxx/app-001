@use "../../theme/mixins" as theme-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "../../feature-targeting/functions" as feature-targeting-functions;
@use "../../feature-targeting/mixins" as feature-targeting-mixins;
@use "../../typography/mixins" as typography-mixins;
@mixin character-counter-core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-text-field-character-counter {
    @include typography-mixins.typography(caption, $query: $query);
    @include typography-mixins.text-baseline($top: 16px, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {

      @include rtl-mixins.reflexive-box(margin, left, auto);
      @include rtl-mixins.reflexive-box(padding, left, 16px);
      white-space: nowrap;
    }
  }

}
@mixin character-counter-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-text-field--disabled) {
    @include character-counter-color_($color, $query);
  }
}
@mixin disabled-character-counter-color($color, $query: feature-targeting-functions.all()) {
  &.mdc-text-field--disabled {
    @include character-counter-color_($color, $query);
  }
}
@mixin character-counter-position($xOffset, $yOffset, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-text-field-character-counter {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(right, $xOffset);
      position: absolute;
      bottom: $yOffset;
    }
  }
}
@mixin character-counter-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);


  .mdc-text-field-character-counter,
  + .mdc-text-field-helper-line .mdc-text-field-character-counter {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}
