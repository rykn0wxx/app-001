@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "./variables";
@function breakpoint-min($size) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  $min: map.get(variables.$breakpoints, $size);
  @return if($min > 0, $min, null);
}
@function breakpoint-max($size) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  $names: map.keys(variables.$columns);
  $n: list.index($names, $size);
  $prev: if($n > 1, list.nth($names, $n - 1), null);
  @return if($prev, (breakpoint-min($prev) - 1px), null);
}
@mixin media-query_($size) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  $min: breakpoint-min($size);
  $max: breakpoint-max($size);
  @if $min == null and $max != null {
   
    @media (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max != null {
   
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max == null {
   
    @media (min-width: $min) {
      @content;
    }
  } @else {
   
    @content;
  }
}
@mixin cell-span_($size, $span, $gutter) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  $percent: math.percentage($span / map.get(variables.$columns, $size));
  @if $percent > 100% {
    $percent: 100%;
  }
  width: calc(#{$percent} - #{$gutter});
 
  width: calc(#{$percent} - var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}));
  @supports (display: grid) {
    width: auto;
    grid-column-end: span math.min($span, map.get(variables.$columns, $size));
  }
}
@mixin layout-grid($size, $margin, $max-width: null) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  box-sizing: border-box;
  margin: 0 auto;
  padding: $margin;
 
  padding: var(--mdc-layout-grid-margin-#{$size}, #{$margin});
  @if $max-width {
    max-width: $max-width;
  }
}
@mixin inner($size, $margin, $gutter) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  display: flex;
  flex-flow: row wrap;
  align-items: stretch;
  margin: -$gutter / 2;
 
  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2 * -1);
  @supports (display: grid) {
    display: grid;
    margin: 0;
    grid-gap: $gutter;
   
    grid-gap: var(--mdc-layout-grid-gutter-#{$size}, $gutter);
    grid-template-columns: repeat(map.get(variables.$columns, $size), minmax(0, 1fr));
  }
}
@mixin cell($size, $default-span, $gutter) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  @include cell-span_($size, $default-span, $gutter);
  box-sizing: border-box;
  margin: $gutter / 2;
 
  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2);
  @supports (display: grid) {
    margin: 0;
  }
}
@mixin cell-order($order) {
  order: $order;
}
@mixin cell-align($position) {
  @if $position == "top" {
    align-self: flex-start;
    @supports (display: grid) {
      align-self: start;
    }
  }
  @if $position == "middle" {
    align-self: center;
  }
  @if $position == "bottom" {
    align-self: flex-end;
    @supports (display: grid) {
      align-self: end;
    }
  }
  @if $position == "stretch" {
    align-self: stretch;
  }
}
@mixin fixed-column-width($size, $margin, $gutter, $column-width) {
  @if not map.has-key(variables.$columns, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$columns)}";
  }
  $columnCount: map.get(variables.$columns, $size);
  $gutter-number: $columnCount - 1;
  $margin-number: 2;
  width: $column-width * $columnCount + $gutter * $gutter-number + $margin * $margin-number;
 
  width:
    calc(
      var(--mdc-layout-grid-column-width-#{$size}, #{$column-width}) * #{$columnCount} +
      var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) * #{$gutter-number} +
      var(--mdc-layout-grid-margin-#{$size}, #{$margin}) * #{$margin-number}
    );
}
