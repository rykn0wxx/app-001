@use "sass:list";
@use "sass:map";
@use "./variables";
@use "./mixins";
:root {
  @each $size in map.keys(variables.$columns) {
    --mdc-layout-grid-margin-#{$size}: #{map.get(variables.$default-margin, $size)};
    --mdc-layout-grid-gutter-#{$size}: #{map.get(variables.$default-gutter, $size)};
    --mdc-layout-grid-column-width-#{$size}: #{map.get(variables.$column-width, $size)};
  }
}
.mdc-layout-grid {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);
      @include mixins.layout-grid($size, $margin, variables.$max-width);
    }
  }
}
.mdc-layout-grid__inner {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);
      $gutter: map.get(variables.$default-gutter, $size);
      @include mixins.inner($size, $margin, $gutter);
    }
  }
}
.mdc-layout-grid__cell {
 
  $upper-breakpoint: list.nth(map.keys(variables.$columns), 1);
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $gutter: map.get(variables.$default-gutter, $size);
      @include mixins.cell($size, variables.$default-column-span, $gutter);
      @for $span from 1 through map.get(variables.$columns, $upper-breakpoint) {
       
       
        @at-root .mdc-layout-grid__cell--span-#{$span},
        .mdc-layout-grid__cell--span-#{$span}-#{$size} {
          @include mixins.cell-span_($size, $span, $gutter);
        }
       
      }
    }
  }
 
  @for $i from 1 through map.get(variables.$columns, $upper-breakpoint) {
    &--order-#{$i} {
      @include mixins.cell-order($i);
    }
  }
 
  &--align-top {
    @include mixins.cell-align(top);
  }
  &--align-middle {
    @include mixins.cell-align(middle);
  }
  &--align-bottom {
    @include mixins.cell-align(bottom);
  }
}
.mdc-layout-grid--fixed-column-width {
  @each $size in map.keys(variables.$columns) {
    @include mixins.media-query_($size) {
      $margin: map.get(variables.$default-margin, $size);
      $gutter: map.get(variables.$default-gutter, $size);
      $column-width: map.get(variables.$column-width, $size);
      @include mixins.fixed-column-width($size, $margin, $gutter, $column-width);
    }
  }
}
.mdc-layout-grid--align-left {
  margin-right: auto;
  margin-left: 0;
}
.mdc-layout-grid--align-right {
  margin-right: 0;
  margin-left: auto;
}
