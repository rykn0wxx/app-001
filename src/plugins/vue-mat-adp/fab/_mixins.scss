@use "../animation/functions" as animation-functions;
@use "../elevation/mixins" as elevation-mixins;
@use "../elevation/variables" as elevation-variables;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../dom/mixins" as dom-mixins;
@use "../ripple/mixins" as ripple-mixins;
@use "../ripple/variables" as variables2;
@use "@material/rtl/mixins" as rtl-mixins;
@use "../shape/mixins" as shape-mixins;
@use "../shape/functions" as shape-functions;
@use "../theme/functions" as theme-functions;
@use "../theme/mixins" as theme-mixins;
@use "../touch-target/mixins" as touch-target-mixins;
@use "../typography/mixins" as typography-mixins;
@use "./variables";
$ripple-target: ".mdc-fab__ripple";
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}
@mixin without-ripple($query: feature-targeting-functions.all()) {

  @include touch-target-mixins.wrapper($query);
  @include elevation-mixins.overlay-common($query);
  .mdc-fab {
    @include base_($query: $query);
    @include container-color(secondary, $query: $query);
    @include icon-size(24px, $query: $query);
    @include ink-color(on-secondary, $query: $query);
  }
  .mdc-fab--mini {
    @include mini_($query: $query);
  }
  .mdc-fab--extended {
    @include extended_($query: $query);
  }
  .mdc-fab--touch {
    @include touch-target-mixins.margin(
      $component-height: variables.$mini-height,
      $component-width: variables.$mini-height,
      $query: $query);
    .mdc-fab__touch {
      @include touch-target-mixins.touch-target($set-width: true, $query: $query);
    }
  }
  .mdc-fab::before {
    @include dom-mixins.transparent-border($query: $query);
  }
  .mdc-fab__label {
    @include label_($query: $query);
  }
  .mdc-fab__icon {
    @include icon_($query: $query);
  }


  .mdc-fab .mdc-fab__icon {
    @include icon-overrides_($query: $query);
  }
  .mdc-fab--exited {
    @include exited_($query: $query);
  }

}
@mixin ripple($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include ripple-mixins.common($query);

  .mdc-fab {
    @include ripple-mixins.surface(
      $query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.radius-bounded(
      $query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.states(
      on-secondary, $query: $query, $ripple-target: $ripple-target);

    #{$ripple-target} {
      @include ripple-mixins.target-common($query: $query);
      @include feature-targeting-mixins.targets($feat-structure) {
        overflow: hidden;
      }
    }
  }

}
@mixin accessible($container-color, $query: feature-targeting-functions.all()) {
  @include container-color($container-color, $query: $query);
  $fill-tone: theme-functions.tone($container-color);
  @if ($fill-tone == "dark") {
    @include ink-color(text-primary-on-dark, $query: $query);
    @include ripple-mixins.states(
      text-primary-on-dark,
      $query: $query,
      $ripple-target: $ripple-target);
  } @else {
    @include ink-color(text-primary-on-light, $query: $query);
    @include ripple-mixins.states(
      text-primary-on-light,
      $query: $query,
      $ripple-target: $ripple-target);
  }
}
@mixin container-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(background-color, $color);
  }
}
@mixin icon-size($width, $height: $width, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-fab__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: $width;
      height: $height;
      font-size: $height;
    }
  }
}
@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(color, $color);
  }
}
@mixin extended-fluid($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    width: 100%;
  }
}
@mixin extended-padding($icon-padding, $label-padding, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include extended-label-padding($label-padding, $query: $query);

  .mdc-fab__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(margin, $icon-padding - $label-padding, $icon-padding);
    }
  }

  .mdc-fab__label + .mdc-fab__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(margin, $icon-padding, $icon-padding - $label-padding);
    }
  }
}
@mixin extended-label-padding($label-padding, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    padding: 0 $label-padding;
  }
}
@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  &:not(.mdc-fab--extended) {
    @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);
    #{$ripple-target} {
      @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);
    }
  }
}
@mixin extended-shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  @include shape-mixins.radius(
    shape-functions.resolve-percentage-radius(variables.$extended-height, $radius),
    $rtl-reflexive,
    $query: $query
  );
  #{$ripple-target} {
    @include shape-mixins.radius(
      shape-functions.resolve-percentage-radius(variables.$extended-height, $radius),
      $rtl-reflexive,
      $query: $query
    );
  }
}
$icon-enter-delay_: 90ms;
$icon-enter-duration_: 180ms;
@mixin base_($query: feature-targeting-functions.all()) {
  @include elevation-mixins.overlay-surface-position($query: $query);
  @include elevation-mixins.overlay-dimensions(100%, $query: $query);
  @include elevation-mixins.elevation(6, $query: $query);
  @include shape-radius(50%, $query: $query);
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    display: inline-flex;
    position: relative;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    width: variables.$height;
    height: variables.$height;
    padding: 0;
    border: none;
    fill: currentColor;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
    -moz-appearance: none;
    -webkit-appearance: none;


    overflow: visible;
  }
  @include feature-targeting-mixins.targets($feat-animation) {
    transition:
      box-shadow elevation-variables.$transition-duration elevation-variables.$transition-timing-function,
      opacity 15ms linear 30ms,
      animation-functions.enter(transform, $icon-enter-duration_ + $icon-enter-delay_);
  }
  &::-moz-focus-inner {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding: 0;
      border: 0;
    }
  }
  &:hover,
  &:focus {
    @include elevation-mixins.elevation(8, $query: $query);
  }
  &:active {
    @include elevation-mixins.elevation(12, $query: $query);
  }
  &:active,
  &:focus {




    @include feature-targeting-mixins.targets($feat-structure) {
      outline: none;
    }
  }
  &:hover {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: pointer;
    }
  }




  > svg {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: 100%;
    }
  }

}
@mixin mini_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    width: variables.$mini-height;
    height: variables.$mini-height;
  }
}
@mixin extended_($query: feature-targeting-functions.all()) {
  @include typography-mixins.typography(button, $query: $query);
  @include extended-shape-radius(50%, $query: $query);
  @include extended-padding(variables.$extended-icon-padding, variables.$extended-label-padding, $query: $query);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    width: auto;
    max-width: 100%;
    height: variables.$extended-height;

    line-height: normal;
  }
}
@mixin icon_($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-animation) {
    transition: animation-functions.enter(transform, $icon-enter-duration_, $icon-enter-delay_);
  }
  @include feature-targeting-mixins.targets($feat-structure) {
    fill: currentColor;
    will-change: transform;
  }
}
@mixin label_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    justify-content: flex-start;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow-x: hidden;
    overflow-y: visible;
  }
}
@mixin icon-overrides_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
}
@mixin exited_($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    transform: scale(0);
    opacity: 0;
  }
  @include feature-targeting-mixins.targets($feat-animation) {
    transition:
      opacity 15ms linear 150ms,
      animation-functions.exit-permanent(transform, 180ms);
  }
  .mdc-fab__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      transform: scale(0);
    }
    @include feature-targeting-mixins.targets($feat-animation) {
      transition: animation-functions.exit-permanent(transform, 135ms);
    }
  }
}
