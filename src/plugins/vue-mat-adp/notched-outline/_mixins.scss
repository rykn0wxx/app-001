@use "sass:list";
@use "../theme/mixins" as theme-mixins;
@use "../shape/mixins" as shape-mixins;
@use "../floating-label/mixins" as floating-label-mixins;
@use "../shape/functions" as shape-functions;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "./variables";
@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-notched-outline {
    @include base_($query);
    &__leading,
    &__notch,
    &__trailing {
      @include feature-targeting-mixins.targets($feat-structure) {
        box-sizing: border-box;
        height: 100%;
        border-top: variables.$border-width solid;
        border-bottom: variables.$border-width solid;
        pointer-events: none;
      }
    }
    &__leading {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(border, variables.$border-width solid, none);
        width: variables.$leading-width;
      }
    }
    &__trailing {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(border, none, variables.$border-width solid);
        flex-grow: 1;
      }
    }
    &__notch {
      @include feature-targeting-mixins.targets($feat-structure) {
        flex: 0 0 auto;
        width: auto;
        max-width: calc(100% - #{variables.$leading-width} * 2);
      }
    }
    .mdc-floating-label {
      @include feature-targeting-mixins.targets($feat-structure) {
        display: inline-block;
        position: relative;
        max-width: 100%;
      }
    }
    .mdc-floating-label--float-above {
      @include feature-targeting-mixins.targets($feat-structure) {
        text-overflow: clip;
      }
    }
    &--upgraded .mdc-floating-label--float-above {
      @include feature-targeting-mixins.targets($feat-structure) {
        max-width: calc(100% / .75);
      }
    }
  }
  .mdc-notched-outline--notched {
    .mdc-notched-outline__notch {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-box(padding, right, 8px);
        border-top: none;
      }
    }
  }
  .mdc-notched-outline--no-label {
    .mdc-notched-outline__notch {
      @include feature-targeting-mixins.targets($feat-structure) {
        padding: 0;
      }
    }
  }
}
@mixin color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-notched-outline__leading,
  .mdc-notched-outline__notch,
  .mdc-notched-outline__trailing {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
@mixin stroke-width($width, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-notched-outline__leading,
  .mdc-notched-outline__notch,
  .mdc-notched-outline__trailing {
    @include feature-targeting-mixins.targets($feat-structure) {
      border-width: $width;
    }
  }
}
@mixin notch-offset($stroke-width, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-notched-outline--notched .mdc-notched-outline__notch {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding-top: $stroke-width;
    }
  }
}
@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $radius: shape-functions.prop-value($radius);
  @if (list.length($radius) > 1) {

    @warn "mdc-notched-outline-shape-radius only supports a single radius; see https://github.com/material-components/material-components-web/issues/4140";
  }
  $radius: list.nth($radius, 1);
  .mdc-notched-outline__leading {
    @include shape-mixins.radius(shape-functions.mask-radius($radius, 1 0 0 1), $rtl-reflexive: true, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      @if ($radius > variables.$leading-width) {
        width: $radius;
      }
    }
  }
  @if ($radius > variables.$leading-width) {
    .mdc-notched-outline__notch {
      @include feature-targeting-mixins.targets($feat-structure) {
        max-width: calc(100% - #{$radius} * 2);
      }
    }
  }
  .mdc-notched-outline__trailing {
    @include shape-mixins.radius(shape-functions.mask-radius($radius, 0 1 1 0), $rtl-reflexive: true, $query: $query);
  }
}
@mixin floating-label-float-position(
  $positionY, $positionX: 0%, $scale: .75, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include floating-label-mixins.float-position(
    $positionY + variables.$label-adjust, $positionX, 1, $query: $query);
  .mdc-floating-label--float-above {
    @include feature-targeting-mixins.targets($feat-structure) {
      font-size: ($scale * 1rem);
    }
  }

  &.mdc-notched-outline--upgraded,
  .mdc-notched-outline--upgraded {
    @include floating-label-mixins.float-position($positionY, $positionX, $scale, $query: $query);

    .mdc-floating-label--float-above {
      @include feature-targeting-mixins.targets($feat-structure) {
        font-size: 1rem;
      }
    }
  }
}
@mixin floating-label-float-position-absolute(
  $positionY, $positionX: 0, $scale: .75, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include floating-label-mixins.float-position(
    $positionY + variables.$label-adjust-absolute, $positionX, 1, $query: $query);
  .mdc-floating-label--float-above {
    @include feature-targeting-mixins.targets($feat-structure) {
      font-size: ($scale * 1rem);
    }
  }

  &.mdc-notched-outline--upgraded,
  .mdc-notched-outline--upgraded {
    @include floating-label-mixins.float-position(
      $positionY, $positionX, $scale, $query: $query);

    .mdc-floating-label--float-above {
      @include feature-targeting-mixins.targets($feat-structure) {
        font-size: 1rem;
      }
    }
  }
}
@mixin notch-max-width($max-width, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch {
    @include feature-targeting-mixins.targets($feat-structure) {
      max-width: $max-width;
    }
  }
}
@mixin base_($query) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    max-width: 100%;
    height: 100%;
    text-align: left;
    pointer-events: none;
    @include rtl-mixins.rtl {
      text-align: right;
    }
  }
}
