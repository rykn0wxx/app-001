@use "sass:math";
@use "../density/functions" as density-functions;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../ripple/mixins" as ripple-mixins;
@use "@material/rtl/mixins" as rtl;
@use "../theme/mixins" as theme-mixins;
@use "./variables";
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}
@mixin without-ripple($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-icon-button {
    @include base_($query: $query);
    @include density(0, $query: $query);
  }
  .mdc-icon-button__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
    }

    &.mdc-icon-button__icon--on {
      @include feature-targeting-mixins.targets($feat-structure) {
        display: none;
      }
    }
  }
  .mdc-icon-button--on {
    .mdc-icon-button__icon {
      @include feature-targeting-mixins.targets($feat-structure) {
        display: none;
      }

      &.mdc-icon-button__icon--on {
        @include feature-targeting-mixins.targets($feat-structure) {
          display: inline-block;
        }
      }
    }
  }

}
@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query);
  .mdc-icon-button {
    @include ripple-mixins.surface($query: $query);
    @include ripple-mixins.radius-unbounded($query: $query);
    @include ripple-mixins.states($query: $query);
  }
}
@mixin density($density-scale, $query: feature-targeting-functions.all()) {
  $size: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: size,
  );
  @include size($size, $query: $query);
}
@mixin size($size, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    width: $size;
    height: $size;
    padding: ($size - variables.$icon-size) / 2;
  }
}
@mixin icon-size($width, $height: $width, $padding: math.max($width,$height) / 2, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    width: $width + $padding * 2;
    height: $height + $padding * 2;
    padding: $padding;
    font-size: math.max($width, $height);
  }

  svg,
  img {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: $width;
      height: $height;
    }
  }
}
@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  @include ink-color_($color, $query: $query);
  @include ripple-mixins.states($color, $query: $query);
}
@mixin flip-icon-in-rtl($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-button__icon {
    @include rtl.rtl {
      @include feature-targeting-mixins.targets($feat-structure) {
        transform: rotate(180deg);
      }
    }
  }
}
@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include ink-color_($color, $query: $query);
  }
}
@mixin base_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    display: inline-block;
    position: relative;
    box-sizing: border-box;
    border: none;
    outline: none;
    background-color: transparent;
    fill: currentColor;
    color: inherit;
    font-size: variables.$icon-size;
    text-decoration: none;
    cursor: pointer;
    user-select: none;
  }

  svg,
  img {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: variables.$icon-size;
      height: variables.$icon-size;
    }
  }
  @include disabled-ink-color(text-disabled-on-light, $query: $query);
  @include if-disabled_ {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: default;
      pointer-events: none;
    }
  }
}
@mixin ink-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(color, $color);
  }
}
@mixin if-disabled_ {
  &:disabled {
    @content;
  }
}
