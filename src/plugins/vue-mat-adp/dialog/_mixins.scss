@use "sass:math";
@use "../animation/functions" as animation-functions;
@use "../button/variables" as button-variables;
@use "../elevation/mixins" as elevation-mixins;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "../shape/mixins" as shape-mixins;
@use "../theme/mixins" as theme-mixins;
@use "../theme/variables" as theme-variables;
@use "../touch-target/variables" as touch-target-variables;
@use "../typography/mixins" as typography-mixins;
@use "./variables";
@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include elevation-mixins.overlay-common($query);

  .mdc-dialog,
  .mdc-dialog__scrim {
    @include feature-targeting-mixins.targets($feat-structure) {
      position: fixed;
      top: 0;
      left: 0;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
    }
  }
  .mdc-dialog {
    @include container-fill-color(surface, $query: $query);
    @include scrim-color(variables.$scrim-color, $query: $query);
    @include title-ink-color(variables.$title-ink-color, $query: $query);
    @include content-ink-color(variables.$content-ink-color, $query: $query);
    @include scroll-divider-color(variables.$scroll-divider-color, $query: $query);
    @include min-width(variables.$min-width, $query: $query);
    @include max-width(variables.$max-width, variables.$margin, $query: $query);
    @include max-height(null, variables.$margin, $query: $query);
    @include shape-radius(medium, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {

      display: none;
      z-index: variables.$z-index;
    }
  }
  .mdc-dialog__scrim {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 0;
      z-index: -1;
    }
  }


  .mdc-dialog__container {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-around;
      box-sizing: border-box;
      height: 100%;
      transform: scale(.8);
      opacity: 0;


      pointer-events: none;
    }
  }
  .mdc-dialog__surface {
    @include elevation-mixins.overlay-surface-position($query: $query);
    @include elevation-mixins.overlay-dimensions(100%, $query: $query);
    @include elevation-mixins.elevation(24, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      box-sizing: border-box;
      max-width: 100%;
      max-height: 100%;
      pointer-events: auto;

      overflow-y: auto;
      @include rtl-mixins.rtl(".mdc-dialog") {
        text-align: right;
      }
    }
  }
  .mdc-dialog__title {
    @include typography-mixins.text-baseline($top: 40px, $display: block, $query: $query);
    @include typography-mixins.typography(headline6, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      position: relative;
      flex-shrink: 0;
      box-sizing: border-box;
      margin: 0;
      padding: 0 24px variables.$title-bottom-padding;
      border-bottom: 1px solid transparent;
      @include rtl-mixins.rtl(".mdc-dialog") {
        text-align: right;
      }
    }
  }

  .mdc-dialog--scrollable .mdc-dialog__title {
    @include feature-targeting-mixins.targets($feat-structure) {


      padding-bottom: variables.$title-bottom-padding + 6px;
    }
  }
  .mdc-dialog__content {
    @include typography-mixins.typography(body1, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      flex-grow: 1;
      box-sizing: border-box;
      margin: 0;
      padding: 20px 24px;
      overflow: auto;
      -webkit-overflow-scrolling: touch;
    }

    > :first-child {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin-top: 0;
      }
    }

    > :last-child {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin-bottom: 0;
      }
    }
  }

  .mdc-dialog__title + .mdc-dialog__content {
    @include feature-targeting-mixins.targets($feat-structure) {


      padding-top: 0;
    }
  }

  .mdc-dialog--scrollable .mdc-dialog__content {
    @include feature-targeting-mixins.targets($feat-structure) {


      padding-top: 8px;
      padding-bottom: 8px;
    }
  }

  .mdc-dialog__content .mdc-list:first-child:last-child {
    @include feature-targeting-mixins.targets($feat-structure) {

      padding: 6px 0 0;
    }
  }

  .mdc-dialog--scrollable .mdc-dialog__content .mdc-list:first-child:last-child {
    @include feature-targeting-mixins.targets($feat-structure) {

      padding: 0;
    }
  }
  .mdc-dialog__actions {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      position: relative;
      flex-shrink: 0;
      flex-wrap: wrap;
      align-items: center;
      justify-content: flex-end;
      box-sizing: border-box;
      min-height: 52px;
      margin: 0;
      padding: variables.$actions-padding;
      border-top: 1px solid transparent;
    }
    .mdc-dialog--stacked & {
      @include feature-targeting-mixins.targets($feat-structure) {
        flex-direction: column;
        align-items: flex-end;
      }
    }
  }
  .mdc-dialog__button {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-box(margin, left, 8px);
    }
    &:first-child {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-box(margin, left, 0);
      }
    }
    @include feature-targeting-mixins.targets($feat-structure) {
      max-width: 100%;
      text-align: right;
      @include rtl-mixins.rtl(".mdc-dialog") {
        text-align: left;
      }
    }
    .mdc-dialog--stacked &:not(:first-child) {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin-top: 12px;
      }
    }
  }
  .mdc-dialog--open,
  .mdc-dialog--opening,
  .mdc-dialog--closing {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
    }
  }
  .mdc-dialog--opening {
    .mdc-dialog__scrim {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition: opacity 150ms linear;
      }
    }
    .mdc-dialog__container {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition: opacity 75ms linear, animation-functions.enter(transform, 150ms);
      }
    }
  }
  .mdc-dialog--closing {
    .mdc-dialog__scrim,
    .mdc-dialog__container {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition: opacity 75ms linear;
      }
    }
    .mdc-dialog__container {
      @include feature-targeting-mixins.targets($feat-structure) {

        transform: scale(1);
      }
    }
  }
  .mdc-dialog--open {
    .mdc-dialog__scrim {
      @include feature-targeting-mixins.targets($feat-structure) {
        opacity: 1;
      }
    }
    .mdc-dialog__container {
      @include feature-targeting-mixins.targets($feat-structure) {
        transform: scale(1);
        opacity: 1;
      }
    }
  }


  .mdc-dialog-scroll-lock {
    @include feature-targeting-mixins.targets($feat-structure) {
      overflow: hidden;
    }
  }
}
@mixin container-fill-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-dialog__surface {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
@mixin scrim-color($color, $opacity: variables.$scrim-opacity, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-dialog__scrim {
    @include feature-targeting-mixins.targets($feat-color) {
      background-color: rgba(theme-variables.prop-value($color), $opacity);
    }
  }
}
@mixin title-ink-color($color, $opacity: variables.$title-ink-opacity, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-dialog__title {
    @include feature-targeting-mixins.targets($feat-color) {
      color: rgba(theme-variables.prop-value($color), $opacity);
    }
  }
}
@mixin content-ink-color($color, $opacity: variables.$content-ink-opacity, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-dialog__content {
    @include feature-targeting-mixins.targets($feat-color) {
      color: rgba(theme-variables.prop-value($color), $opacity);
    }
  }
}
@mixin scroll-divider-color(
  $color,
  $opacity: variables.$scroll-divider-opacity,
  $query: feature-targeting-functions.all()
) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  &.mdc-dialog--scrollable .mdc-dialog__title,
  &.mdc-dialog--scrollable .mdc-dialog__actions {
    @include feature-targeting-mixins.targets($feat-color) {
      border-color: rgba(theme-variables.prop-value($color), $opacity);
    }
  }
}
@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-dialog__surface {
    @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);
  }
}
@mixin min-width($min-width, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  .mdc-dialog__surface {
    @include feature-targeting-mixins.targets($feat-structure) {
      min-width: $min-width;
    }
  }
}
@mixin max-width($max-width, $margin, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $max-size-calc-expr: calc(100vw - #{$margin * 2});
  .mdc-dialog__surface {
    @include feature-targeting-mixins.targets($feat-structure) {
      @if $max-width {
        $max-width-breakpoint: $max-width + ($margin * 2);

        @media (max-width: $max-width-breakpoint) {
          max-width: $max-size-calc-expr;
        }

        @media (min-width: $max-width-breakpoint) {
          max-width: $max-width;
        }
      } @else {
        max-width: $max-size-calc-expr;
      }
    }
  }
}
@mixin max-height($max-height, $margin, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $max-size-calc-expr: calc(100% - #{$margin * 2});
  .mdc-dialog__surface {
    @include feature-targeting-mixins.targets($feat-structure) {
      @if $max-height {
        $max-height-breakpoint: $max-height + ($margin * 2);

        @media (max-height: $max-height-breakpoint) {
          max-height: $max-size-calc-expr;
        }

        @media (min-height: $max-height-breakpoint) {
          max-height: $max-height;
        }
      } @else {
        max-height: $max-size-calc-expr;
      }
    }
  }

  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {



    .mdc-dialog__container {
      @include feature-targeting-mixins.targets($feat-structure) {


        @if $max-height {
          $max-height-breakpoint: $max-height + ($margin * 2);
          @media (min-height: $max-height-breakpoint) {
            align-items: stretch;
            height: auto;
          }
        }
      }
    }
  }
}
@mixin with-touch-target($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $touch-target-margin:
    (touch-target-variables.$height - button-variables.$height) / 2;
  $vertical-padding: math.max(0, variables.$actions-padding - $touch-target-margin);


  .mdc-dialog__actions {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding-top: $vertical-padding;
      padding-bottom: $vertical-padding;



      .mdc-button__touch {
        top: -$touch-target-margin;
        transform: none;
      }
    }
  }
}
