@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "./variables";
@function create-target($feature-query, $targeted-feature) {
  $feature-target: (query: $feature-query, target: $targeted-feature);
  $valid: verify-target_($feature-target);

  @return $feature-target;
}
@function parse-targets($feature-targets) {
  $valid: verify-target_($feature-targets...);
  $available-features: ();

  @each $target in $feature-targets {
    $available-features: list.append($available-features, map.get($target, target));
  }

  @return (
    available: $available-features,
    query: map.get(list.nth($feature-targets, 1), query)
  );
}

// Creates a feature query that is satisfied iff all of its sub-queries are satisfied.
@function all($feature-queries...) {
  $valid: verify-query_($feature-queries...);

  @return (
    op: all,
    queries: $feature-queries
  );
}

// Creates a feature query that is satisfied iff any of its sub-queries are satisfied.
@function any($feature-queries...) {
  $valid: verify-query_($feature-queries...);

  @return (
    op: any,
    queries: $feature-queries
  );
}

// Creates a feature query that is satisfied iff its sub-query is not satisfied.
@function without($feature-query) {
  $valid: verify-query_($feature-query);

  @return (
    op: without,
    // NOTE: we need to use `append`, just putting parens around a single value doesn't make it a list in Sass.
    queries: list.append((), $feature-query)
  );
}

//
// Package-internal
//

// Verifies that the given feature targets are valid, throws an error otherwise.
@function verify-target_($feature-targets...) {
  @each $target in $feature-targets {
    @if meta.type-of($target) != map {
      @error "Invalid feature target: '#{$target}'. Must be a map.";
    }

    $targeted-feature: map.get($target, target);
    $feature-query: map.get($target, query);
    $valid: verify-feature_($targeted-feature) and verify-query_($feature-query);
  }

  @return true;
}

// Checks whether the given feature query is satisfied by the given list of available features.
@function is-query-satisfied_($feature-query, $available-features) {
  $valid: verify-query_($feature-query);
  $valid: verify-feature_($available-features...);

  @if meta.type-of($feature-query) == map {
    $op: map.get($feature-query, op);
    $sub-queries: map.get($feature-query, queries);

    @if $op == without {
      @return not is-query-satisfied_(list.nth($sub-queries, 1), $available-features);
    }

    @if $op == any {
      @each $sub-query in $sub-queries {
        @if is-query-satisfied_($sub-query, $available-features) {
          @return true;
        }
      }

      @return false;
    }

    @if $op == all {
      @each $sub-query in $sub-queries {
        @if not is-query-satisfied_($sub-query, $available-features) {
          @return false;
        }
      }

      @return true;
    }
  }

  @return list-contains_($available-features, $feature-query);
}

//
// Private
//

// Verifies that the given feature(s) are valid, throws an error otherwise.
@function verify-feature_($features...) {
  @each $feature in $features {
    @if not list-contains_(variables.$all-features, $feature) {
      @error "Invalid feature: '#{$feature}'. Valid features are: #{variables.$all-features}.";
    }
  }

  @return true;
}

// Verifies that the given feature queries are valid, throws an error otherwise.
@function verify-query_($feature-queries...) {
  @each $query in $feature-queries {
    @if meta.type-of($query) == map {
      $op: map.get($query, op);
      $sub-queries: map.get($query, queries);
      $valid: verify-query_($sub-queries...);

      @if not list-contains_(variables.$all-query-operators, $op) {
        @error "Invalid feature query operator: '#{$op}'. " +
          "Valid operators are: #{variables.$all-query-operators}";
      }
    } @else {
      $valid: verify-feature_($query);
    }
  }

  @return true;
}

// Checks whether the given list contains the given item.
@function list-contains_($list, $item) {
  @return list.index($list, $item) != null;
}
