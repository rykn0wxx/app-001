@use "sass:map";
@use "sass:meta";
@use "./functions";

@import "../../../sass/init";

//
// Text colors according to light vs dark and text type.
//

$primary: $mdc-theme-primary;
$secondary: $mdc-theme-secondary;
$background: $mdc-theme-background;
$surface: $mdc-theme-surface;
$error: $mdc-theme-error;
$on-primary: $mdc-theme-on-primary;
$on-secondary: $mdc-theme-on-secondary;
$on-surface: $mdc-theme-on-surface;
$on-error: $mdc-theme-on-error;

$text-colors: (
  dark: (
    primary: rgba($f3, .87),
    secondary: rgba($f3, .54),
    hint: rgba($f3, .38),
    disabled: rgba($f3, .38),
    icon: rgba($f3, .38)
  ),
  light: (
    primary: $mdc-theme-on-primary,
    secondary: rgba($mdc-theme-on-secondary, .7),
    hint: rgba($mdc-theme-on-secondary, .5),
    disabled: rgba($mdc-theme-on-secondary, .5),
    icon: rgba($mdc-theme-on-secondary, .5)
  )
);

$text-emphasis: (
  high: .87,
  medium: .6,
  disabled: .38,
);

@function ink-color-for-fill_($text-style, $fill-color) {
  $contrast-tone: functions.contrast-tone($fill-color);

  @return map.get(map.get($text-colors, $contrast-tone), $text-style);
}

//
// Primary text colors for each of the theme colors.
//

$property-values: (
  primary: $primary,
  secondary: $secondary,
  background: $background,
  surface: $surface,
  error: $error,
  on-primary: $on-primary,
  on-secondary: $on-secondary,
  on-surface: $on-surface,
  on-error: $on-error,
  // Text-primary on "background" background
  text-primary-on-background: ink-color-for-fill_(primary, $background),
  text-secondary-on-background: ink-color-for-fill_(secondary, $background),
  text-hint-on-background: ink-color-for-fill_(hint, $background),
  text-disabled-on-background: ink-color-for-fill_(disabled, $background),
  text-icon-on-background: ink-color-for-fill_(icon, $background),
  // Text-primary on "light" background
  text-primary-on-light: ink-color-for-fill_(primary, light),
  text-secondary-on-light: ink-color-for-fill_(secondary, light),
  text-hint-on-light: ink-color-for-fill_(hint, light),
  text-disabled-on-light: ink-color-for-fill_(disabled, light),
  text-icon-on-light: ink-color-for-fill_(icon, light),
  // Text-primary on "dark" background
  text-primary-on-dark: ink-color-for-fill_(primary, dark),
  text-secondary-on-dark: ink-color-for-fill_(secondary, dark),
  text-hint-on-dark: ink-color-for-fill_(hint, dark),
  text-disabled-on-dark: ink-color-for-fill_(disabled, dark),
  text-icon-on-dark: ink-color-for-fill_(icon, dark)
);

@function prop-value($style) {
  @if functions.is-var-with-fallback_($style) {
    @return functions.get-var-fallback_($style);
  }

  @if is-valid-theme-prop-value_($style) {
    @return $style;
  }

  @if not map.has-key($property-values, $style) {
    @error "Invalid theme property: '#{$style}'. Choose one of: #{map.keys($property-values)}";
  }

  @return map.get($property-values, $style);
}

@function accessible-ink-color($fill-color, $text-style: primary) {
  $fill-color-value: prop-value($fill-color);
  $color-map-for-tone: map.get($text-colors, functions.contrast-tone($fill-color-value));

  @if not map.has-key($color-map-for-tone, $text-style) {
    @error "Invalid $text-style: '#{$text-style}'. Choose one of: #{map.keys($color-map-for-tone)}";
  }

  @return map.get($color-map-for-tone, $text-style);
}

@function is-valid-theme-prop-value_($style) {
  @return meta.type-of($style) == "color" or
    $style == "currentColor" or
    str_slice($style, 1, 4) == "var(" or
    $style == "inherit" or
    $style == "transparent" or
    // NOTE: `GrayText` is deprecated, but is the only feasible way to convey the
    // correct high-contrast mode colors in alignment with Windows system colors.
    $style == "GrayText";
}

@function text-emphasis($emphasis) {
  @return map.get($text-emphasis, $emphasis);
}
