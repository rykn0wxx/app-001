@use "../feature-targeting/functions";
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "../theme/mixins" as theme-mixins;
@use "../typography/mixins" as typography-mixins;
@use "./variables";
@mixin core-styles($query: functions.all()) {
  $feat-color: functions.create-target($query, color);
  $feat-structure: functions.create-target($query, structure);
  .mdc-form-field {
    @include typography-mixins.typography(body2, $query);
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, text-primary-on-background);
    }
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-flex;
      align-items: center;
      vertical-align: middle;
    }

    > label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(margin, 0, auto);
        @include rtl-mixins.reflexive-property(padding, variables.$item-spacing, 0);
        order: 0;
      }
    }
  }
  .mdc-form-field--nowrap {
    > label {
      @include feature-targeting-mixins.targets($feat-structure) {
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
    }
  }
  .mdc-form-field--align-end {

    > label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(margin, auto, 0);
        @include rtl-mixins.reflexive-property(padding, 0, variables.$item-spacing);
        order: -1;
      }
    }
  }
  .mdc-form-field--space-between {
    @include feature-targeting-mixins.targets($feat-structure) {
      justify-content: space-between;
    }

    > label {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin: 0;
        @include rtl-mixins.rtl {

          margin: 0;
        }
      }
    }
  }
}
