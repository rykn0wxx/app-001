@use "sass:map";
@use "@material/rtl/mixins" as rtl-mixins;
@use "../density/functions" as density-functions;
@use "../theme/mixins" as theme-mixins;
@use "../shape/functions" as shape-functions;
@use "../shape/mixins" as shape-mixins;
@use "../ripple/mixins" as ripple-mixins;
@use "../theme/functions" as theme-functions;
@use "../typography/mixins" as typography-mixins;
@use "../typography/variables" as typography-variables;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "./variables";
@use "../ripple/functions" as ripple-functions;
@use "../theme/variables" as theme-variables;
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}
@mixin without-ripple($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target($query, typography);
  $item-primary-text-baseline-height: 32px;
  $item-secondary-text-baseline-height: 20px;
  $dense-item-primary-text-baseline-height: 24px;
  $divider-color: if(
    theme-functions.tone(theme-variables.$background) == "dark",
    variables.$divider-color-on-dark-bg,
    variables.$divider-color-on-light-bg
  );
  .mdc-list {
    @include base_($query);
  }
  @include single-line-density(variables.$single-line-density-scale, $query: $query);
  @include item-secondary-text-ink-color(text-secondary-on-background, $query);
  @include item-graphic-fill-color(transparent, $query);
  @include item-graphic-ink-color(text-icon-on-background, $query);
  @include item-meta-ink-color(text-hint-on-background, $query);
  @include group-subheader-ink-color(text-primary-on-background, $query);
  @include item-disabled-text-opacity(variables.$text-disabled-opacity, $query);
  @include item-disabled-text-color(variables.$text-disabled-color, $query);
  .mdc-list--dense {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding-top: 4px;
      padding-bottom: 4px;
      font-size: .812rem;
    }
  }
  .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include item-base_;
    }
  }


  .mdc-list-item--selected,
  .mdc-list-item--activated {
    @include item-primary-text-ink-color(primary, $query);
    @include item-graphic-ink-color(primary, $query);
  }
  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(24px);
      flex-shrink: 0;
      align-items: center;
      justify-content: center;
      fill: currentColor;
    }
  }



  .mdc-list .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-flex;
    }
  }

  .mdc-list-item__meta {

    &:not(.material-icons) {
      @include typography-mixins.typography(caption, $query);
    }

    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(margin, auto, 0, ".mdc-list-item");
    }
  }
  .mdc-list-item__text {
    @include typography-mixins.overflow-ellipsis($query);
  }


  .mdc-list-item__text[for] {
    @include feature-targeting-mixins.targets($feat-structure) {
      pointer-events: none;
    }
  }
  .mdc-list-item__primary-text {
    @include typography-mixins.overflow-ellipsis($query);
    @include typography-mixins.text-baseline(
      $top: $item-primary-text-baseline-height,
      $bottom: $item-secondary-text-baseline-height,
      $display: block,
      $query: $query
    );

    .mdc-list--dense & {
      @include typography-mixins.text-baseline(
        $top: $dense-item-primary-text-baseline-height,
        $bottom: $item-secondary-text-baseline-height,
        $query: $query
      );
    }

  }
  .mdc-list-item__secondary-text {
    @include typography-mixins.typography(body2, $query);
    @include typography-mixins.overflow-ellipsis($query);
    @include typography-mixins.text-baseline(
      $top: $item-secondary-text-baseline-height,
      $display: block,
      $query: $query
    );

    .mdc-list--dense & {
      @include feature-targeting-mixins.targets($feat-structure) {
        font-size: inherit;
      }
    }

  }

  .mdc-list--dense .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 40px;
    }
  }
  .mdc-list--dense .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(20px);
    }
  }
  .mdc-list--avatar-list .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 56px;
    }
  }
  .mdc-list--avatar-list .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(40px);
      border-radius: 50%;
    }
  }
  .mdc-list--two-line .mdc-list-item__text {
    @include feature-targeting-mixins.targets($feat-structure) {
      align-self: flex-start;
    }
  }
  .mdc-list--two-line .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 72px;
    }
  }
  .mdc-list--two-line.mdc-list--dense .mdc-list-item,
  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 60px;
    }
  }
  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include graphic-size_(36px);
    }
  }

  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: pointer;
    }
  }


  a.mdc-list-item {
    @include feature-targeting-mixins.targets($feat-structure) {
      color: inherit;
      text-decoration: none;
    }
  }

  .mdc-list-divider {
    @include feature-targeting-mixins.targets($feat-structure) {
      height: 0;
      margin: 0;
      border: none;
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }
  }


  @include divider-color($divider-color, $query);
  .mdc-list-divider--padded {
    @include feature-targeting-mixins.targets($feat-structure) {

      margin: 0 variables.$side-padding;
    }
  }
  .mdc-list-divider--inset {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-box(margin, left, variables.$text-offset, ".mdc-list-group");
      width: calc(100% - #{variables.$text-offset});
    }
  }
  .mdc-list-divider--inset.mdc-list-divider--padded {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: calc(100% - #{variables.$text-offset} - #{variables.$side-padding});
    }
  }
  .mdc-list-group {
    @include feature-targeting-mixins.targets($feat-structure) {

      .mdc-list {
        padding: 0;
      }
    }
  }
  .mdc-list-group__subheader {
    $mdc-list-subheader-virtual-height: 3rem;
    $mdc-list-subheader-leading: map.get(map.get(typography-variables.$styles, body1), line-height);
    $mdc-list-subheader-margin: calc((#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2);
    @include typography-mixins.typography(subtitle1, $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      margin: $mdc-list-subheader-margin variables.$side-padding;
    }
  }
}
@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query);



  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {
    @include item-interactive-ripple_($query);
  }

  :not(.mdc-list--non-interactive) > .mdc-list-item--disabled {
    @include ripple-mixins.surface($query: $query);
    @include ripple-mixins.radius-bounded($query: $query);
    @include ripple-mixins.states-base-color(theme-variables.prop-value(on-surface), $query: $query);
    @include ripple-mixins.states-focus-opacity(ripple-functions.states-opacity(primary, focus), $query: $query);
  }
}
@mixin item-primary-text-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.prop(color, $color);
  }
}
@mixin item-secondary-text-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item__secondary-text {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}
@mixin item-graphic-fill-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
@mixin item-graphic-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item__graphic {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}
@mixin item-meta-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item__meta {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}
@mixin single-line-shape-radius(
  $radius,
  $rtl-reflexive: false,
  $density-scale: variables.$single-line-density-scale,
  $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$single-line-density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );
  $resolved-radius: shape-functions.resolve-percentage-radius($height, $radius);
  .mdc-list-item {
    @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);
  }
}
@mixin divider-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-divider {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-bottom-color, $color);
    }
  }
}
@mixin group-subheader-ink-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-group__subheader {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}
@mixin item-disabled-text-opacity($opacity, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item--disabled .mdc-list-item__text {
    @include feature-targeting-mixins.targets($feat-color) {
      opacity: $opacity;
    }
  }
}
@mixin item-disabled-text-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-list-item--disabled {
    .mdc-list-item__text,
    .mdc-list-item__primary-text,
    .mdc-list-item__secondary-text {
      @include feature-targeting-mixins.targets($feat-color) {
        @include theme-mixins.prop(color, $color);
      }
    }
  }
}
@mixin single-line-density($density-scale, $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$single-line-density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );
  .mdc-list-item {
    @include single-line-height($height, $query: $query);
  }
}
@mixin single-line-height($height, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    height: $height;
  }
}
@mixin base_($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-typography: feature-targeting-functions.create-target($query, typography);
  @include typography-mixins.typography(subtitle1, $query);
  @include feature-targeting-mixins.targets($feat-typography) {


    line-height: map.get(map.get(typography-variables.$styles, body1), line-height);
  }
  @include feature-targeting-mixins.targets($feat-structure) {
    margin: 0;
    padding: 8px 0;
    list-style-type: none;
    &:focus {
      outline: none;
    }
  }
  @include item-primary-text-ink-color(text-primary-on-background, $query);
}
@mixin item-base_ {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  padding: 0 variables.$side-padding;
  overflow: hidden;
  &:focus {
    outline: none;
  }
}
@mixin item-interactive-ripple_($query: feature-targeting-functions.all()) {
  @include ripple-mixins.surface($query);
  @include ripple-mixins.radius-bounded($query: $query);
  @include ripple-mixins.states(theme-variables.prop-value(on-surface), false, $query);
  @include ripple-mixins.states-activated(primary, false, $query);
  @include ripple-mixins.states-selected(primary, false, $query);
}
@mixin graphic-size_($size) {
  $text-offset: 72px;
  $side-padding: variables.$side-padding;
  $margin-value: $text-offset - $side-padding - $size;
  @include rtl-mixins.reflexive-box(margin, right, $margin-value, ".mdc-list-item");
  width: $size;
  height: $size;
}
