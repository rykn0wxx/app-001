@use "sass:map";
@use "../animation/functions" as functions2;
@use "../density/functions" as density-functions;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../ripple/mixins" as ripple-mixins;
@use "../ripple/variables" as ripple-variables;
@use "../theme/mixins" as theme-mixins;
@use "../theme/variables" as variables2;
@use "../touch-target/mixins" as touch-target-mixins;
@use "../touch-target/variables" as touch-target-variables;
@use "./functions";
@use "./variables";
$ripple-target: ".mdc-radio__ripple";
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}
@mixin without-ripple($query: feature-targeting-functions.all()) {

  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include touch-target-mixins.wrapper($query);
  .mdc-radio {
    @include unchecked-stroke-color(variables.$unchecked-color, $query: $query);
    @include checked-stroke-color(variables.$baseline-theme-color, $query: $query);
    @include ink-color(variables.$baseline-theme-color, $query: $query);
    @include disabled-unchecked-stroke-color(variables.$disabled-circle-color, $query: $query);
    @include disabled-checked-stroke-color(variables.$disabled-circle-color, $query: $query);
    @include disabled-ink-color(variables.$disabled-circle-color, $query: $query);
    @include focus-indicator-color(variables.$baseline-theme-color, $query: $query);
    @include density(variables.$density-scale, $query: $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
      position: relative;
      flex: 0 0 auto;
      box-sizing: content-box;
      width: variables.$icon-size;
      height: variables.$icon-size;
      cursor: pointer;
      will-change: opacity, transform, border-color, color;
    }

    &__background {
      @include feature-targeting-mixins.targets($feat-structure) {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        width: variables.$icon-size;
        height: variables.$icon-size;
      }
      &::before {
        @include feature-targeting-mixins.targets($feat-structure) {
          position: absolute;
          transform: scale(0, 0);
          border-radius: 50%;
          opacity: 0;
          pointer-events: none;
          content: "";
        }
        @include feature-targeting-mixins.targets($feat-animation) {
          transition: functions.exit(opacity), functions.exit(transform);
        }
      }
    }
    &__outer-circle {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        border-width: 2px;
        border-style: solid;
        border-radius: 50%;
      }
      @include feature-targeting-mixins.targets($feat-animation) {
        transition: functions.exit(border-color);
      }
    }
    &__inner-circle {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        transform: scale(0, 0);
        border-width: 10px;
        border-style: solid;
        border-radius: 50%;
      }
      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.exit(transform),
          functions.exit(border-color);
      }
    }
    &__native-control {
      @include feature-targeting-mixins.targets($feat-structure) {
        position: absolute;
        margin: 0;
        padding: 0;
        opacity: 0;
        cursor: inherit;
        z-index: 1;
      }
    }
    &--touch {
      @include touch-target-mixins.margin(
        $component-height: variables.$ripple-size,
        $component-width: variables.$ripple-size,
        $query: $query);
      @include touch-target($size: touch-target-variables.$height, $query: $query);
    }
  }
  .mdc-radio__native-control:checked,
  .mdc-radio__native-control:disabled {
    + .mdc-radio__background {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.enter(opacity),
          functions.enter(transform);
      }
      .mdc-radio__outer-circle {
        @include feature-targeting-mixins.targets($feat-animation) {
          transition: functions.enter(border-color);
        }
      }
      .mdc-radio__inner-circle {
        @include feature-targeting-mixins.targets($feat-animation) {
          transition:
            functions.enter(transform),
            functions.enter(border-color);
        }
      }
    }
  }
  .mdc-radio--disabled {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: default;
      pointer-events: none;
    }
  }
  .mdc-radio__native-control:checked {
    + .mdc-radio__background {
      .mdc-radio__inner-circle {
        @include feature-targeting-mixins.targets($feat-structure) {
          transform: scale(.5);
        }
        @include feature-targeting-mixins.targets($feat-animation) {
          transition:
            functions.enter(transform),
            functions.enter(border-color);
        }
      }
    }
  }
  .mdc-radio__native-control:disabled,
  [aria-disabled="true"] .mdc-radio__native-control {
    + .mdc-radio__background {
      @include feature-targeting-mixins.targets($feat-structure) {
        cursor: default;
      }
    }
  }
  .mdc-radio__native-control:focus {
    + .mdc-radio__background::before {
      @include feature-targeting-mixins.targets($feat-structure) {
        transform: scale(1);
        opacity: map.get(ripple-variables.$dark-ink-opacities, focus);
      }
      @include feature-targeting-mixins.targets($feat-animation) {
        transition:
          functions.enter(opacity),
          functions.enter(transform);
      }
    }
  }

}
@mixin ripple($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include ripple-mixins.common($query);
  .mdc-radio {
    @include ripple-mixins.surface($query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.radius-unbounded($query: $query, $ripple-target: $ripple-target);
    @include ripple-mixins.states(
      $color: variables.$baseline-theme-color, $query: $query, $ripple-target: $ripple-target);
    &.mdc-ripple-upgraded--background-focused {
      .mdc-radio__background::before {
        @include feature-targeting-mixins.targets($feat-structure) {
          content: none;
        }
      }
    }
  }
  #{$ripple-target} {
    @include ripple-mixins.target-common($query: $query);
  }
}
@mixin unchecked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled-unchecked_ {
    @include stroke-color_($color, $query: $query);
  }
}
@mixin checked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled-checked_ {
    @include stroke-color_($color, $query:$query);
  }
}
@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include ink-color_($color, $query: $query);
  }
}
@mixin disabled-unchecked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled-unchecked_ {
    @include stroke-color_($color, $query: $query);
  }
}
@mixin disabled-checked-stroke-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled-checked_ {
    @include stroke-color_($color, $query: $query);
  }
}
@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include ink-color_($color, $query: $query);
  }
}
@mixin focus-indicator-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-radio__background::before {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
@mixin touch-target(
  $size: variables.$ripple-size,
  $ripple-size: variables.$ripple-size,
  $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $offset: ($ripple-size - $size) / 2;
  .mdc-radio__native-control {
    @include feature-targeting-mixins.targets($feat-structure) {
      top: $offset;
      right: $offset;
      left: $offset;
      width: $size;
      height: $size;
    }
  }
}
@mixin density($density-scale, $query: feature-targeting-functions.all()) {
  $size: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: size,
  );
  @include ripple-size($size, $query: $query);

  @include touch-target($size: $size, $ripple-size: $size, $query: $query);
  @if $density-scale != 0 {
    @include touch-target-reset_($query: $query);
  }
}
@mixin ripple-size($size, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $padding: ($size - variables.$icon-size) / 2;
  @include feature-targeting-mixins.targets($feat-structure) {
    padding: $padding;
  }
  .mdc-radio__background::before {
    @include feature-targeting-mixins.targets($feat-structure) {
      top: -$padding;
      left: -$padding;
      width: $size;
      height: $size;
    }
  }
}
@mixin touch-target-reset_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    margin: 0;
  }
}
@mixin if-enabled_ {
  .mdc-radio__native-control:enabled + {
    @content;
  }
}
@mixin if-enabled-unchecked_ {
  .mdc-radio__native-control:enabled:not(:checked) + {
    @content;
  }
}
@mixin if-enabled-checked_ {
  .mdc-radio__native-control:enabled:checked + {
    @content;
  }
}
@mixin if-disabled_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    + {
      @content;
    }
  }
}
@mixin if-disabled-unchecked_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    &:not(:checked) + {
      @content;
    }
  }
}
@mixin if-disabled-checked_ {
  [aria-disabled="true"] .mdc-radio__native-control,
  .mdc-radio__native-control:disabled {
    &:checked + {
      @content;
    }
  }
}
@mixin ink-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-radio__background .mdc-radio__inner-circle {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
@mixin stroke-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  .mdc-radio__background .mdc-radio__outer-circle {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
