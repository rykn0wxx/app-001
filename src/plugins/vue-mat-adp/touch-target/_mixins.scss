@use "../base/mixins" as base-mixins;
@use "../feature-targeting/functions";
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "./variables";
@mixin wrapper($query: functions.all()) {
  $feat-structure: functions.create-target($query, structure);
  .mdc-touch-target-wrapper {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include base-mixins.emit-once("mdc-touch-target/wrapper") {
        display: inline;
      }
    }
  }
}
@mixin touch-target($set-width: false, $query: functions.all()) {
  $feat-structure: functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    position: absolute;
    top: 50%;
    right: 0;
    height: variables.$height;
  }
  @if $set-width {
    @include feature-targeting-mixins.targets($feat-structure) {
      left: 50%;
      width: variables.$width;
      transform: translate(-50%, -50%);
    }
  } @else {
    @include feature-targeting-mixins.targets($feat-structure) {
      left: 0;
      transform: translateY(-50%);
    }
  }
}
@mixin margin($component-height, $component-width: null, $query: functions.all()) {
  $feat-structure: functions.create-target($query, structure);
  $vertical-margin-value: (variables.$height - $component-height) / 2;
  @include feature-targeting-mixins.targets($feat-structure) {
    margin-top: $vertical-margin-value;
    margin-bottom: $vertical-margin-value;
  }
  @if $component-width {
    $horizontal-margin-value: (variables.$width - $component-width) / 2;
    @include feature-targeting-mixins.targets($feat-structure) {
      margin-right: $horizontal-margin-value;
      margin-left: $horizontal-margin-value;
    }
  }
}
