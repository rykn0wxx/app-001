@use "sass:math";
@use "@material/rtl/mixins" as rtl-mixins;
@use "../elevation/mixins" as elevation-mixins;
@use "../feature-targeting/functions";
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../list/mixins" as list-mixins;
@use "../list/variables" as list-variables;
@use "../ripple/mixins" as ripple-mixins;
@use "./variables";
@mixin core-styles($query: functions.all()) {
  $feat-color: functions.create-target($query, color);
  $feat-structure: functions.create-target($query, structure);
  @include ripple-mixins.common($query);
  @include elevation-mixins.overlay-common($query);

  .mdc-menu {
    @include list-mixins.item-meta-ink-color(variables.$ink-color, $query);
    @include list-mixins.item-graphic-ink-color(variables.$ink-color, $query);
    @include feature-targeting-mixins.targets($feat-structure) {
      min-width: variables.$min-width;
    }

    .mdc-list {
      @include list-mixins.item-primary-text-ink-color(variables.$ink-color, $query);
      @include elevation-mixins.overlay-surface-position($query: $query);
      @include elevation-mixins.overlay-dimensions(100%, $query: $query);
    }
    .mdc-list-divider {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin: 8px 0;
      }
    }
    .mdc-list-item {
      @include feature-targeting-mixins.targets($feat-structure) {
        user-select: none;
      }
    }
    .mdc-list-item--disabled {
      @include feature-targeting-mixins.targets($feat-structure) {
        cursor: auto;
      }
    }

    a.mdc-list-item .mdc-list-item__text,
    a.mdc-list-item .mdc-list-item__graphic {
      @include feature-targeting-mixins.targets($feat-structure) {
        pointer-events: none;
      }
    }

  }

  .mdc-menu__selection-group {
    @include feature-targeting-mixins.targets($feat-structure) {
      padding: 0;
      fill: currentColor;
    }
    .mdc-list-item {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(padding, 56px, list-variables.$side-padding);
      }
    }

    .mdc-menu__selection-group-icon {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-position(left, 16px);
        display: none;
        position: absolute;

        top: 50%;
        transform: translateY(-50%);
      }
    }
  }


  .mdc-menu-item--selected .mdc-menu__selection-group-icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline;
    }
  }
}
@mixin width($width, $query: functions.all()) {
  $feat-structure: functions.create-target($query, color);
  @include feature-targeting-mixins.targets($feat-structure) {
    @if math.is-unitless($width) {
      width: $width * variables.$width-base;
    } @else {
      width: $width;
    }
  }
}
