@use "../density/functions" as density-functions;
@use "../elevation/mixins" as elevation-mixins;
@use "../feature-targeting/functions" as feature-targeting-functions;
@use "../feature-targeting/mixins" as feature-targeting-mixins;
@use "../ripple/mixins" as ripple-mixins;
@use "../theme/mixins" as theme-mixins;
@use "@material/rtl/mixins" as rtl-mixins;
@use "./functions";
@use "./variables";
@mixin core-styles($query: feature-targeting-functions.all()) {
  @include without-ripple($query);
  @include ripple($query);
}
@mixin without-ripple($query: feature-targeting-functions.all()) {

  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include density(variables.$density-scale, $query: $query);
  .mdc-switch {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include base_;
    }
    @include toggled-on-track-color(variables.$baseline-theme-color, $query);
    @include toggled-on-thumb-color(variables.$baseline-theme-color, $query);
    @include toggled-off-track-color(variables.$toggled-off-track-color, $query);
    @include toggled-off-thumb-color(variables.$toggled-off-thumb-color, $query);
  }
  .mdc-switch__native-control {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include native-control_;
    }
    @include feature-targeting-mixins.targets($feat-animation) {
      transition: functions.transition(transform);
    }
  }
  .mdc-switch__track {
    @include track_($query);
  }
  .mdc-switch__thumb-underlay {
    @include thumb-underlay_($query);
  }
  .mdc-switch__thumb {
    @include thumb_($query);
  }
  .mdc-switch--checked {
    @include feature-targeting-mixins.targets($feat-structure) {
      .mdc-switch__track {
        @include track-checked_;
      }
      .mdc-switch__thumb-underlay {
        @include thumb-underlay-checked_;
      }
      .mdc-switch__native-control {
        @include native-control-checked_;
      }
    }
  }
  .mdc-switch--disabled {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include disabled-base_;
      .mdc-switch__thumb {
        @include thumb-disabled_;
      }
      .mdc-switch__native-control {
        @include native-control-disabled_;
      }
    }
  }

}
@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query);
  .mdc-switch {
    @include toggled-off-ripple-color(variables.$toggled-off-ripple-color, $query);
  }
  .mdc-switch__thumb-underlay {
    @include ripple-mixins.surface($query);
    @include ripple-mixins.radius-unbounded(100%, $query);
    @include ripple-mixins.states(variables.$baseline-theme-color, false, $query);
  }
}
@mixin toggled-on-color($color, $query: feature-targeting-functions.all()) {
  @include toggled-on-track-color($color, $query);
  @include toggled-on-thumb-color($color, $query);
  @include toggled-on-ripple-color($color, $query);
}
@mixin toggled-off-color($color, $query: feature-targeting-functions.all()) {
  @include toggled-off-track-color($color, $query);
  @include toggled-off-thumb-color($color, $query);
  @include toggled-off-ripple-color($color, $query);
}
@mixin toggled-on-track-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  &.mdc-switch--checked .mdc-switch__track {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
@mixin toggled-on-thumb-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  &.mdc-switch--checked .mdc-switch__thumb {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
@mixin toggled-on-ripple-color($color, $query: feature-targeting-functions.all()) {
  &.mdc-switch--checked .mdc-switch__thumb-underlay {
    @include ripple-mixins.states($color, false, $query);
  }
}
@mixin toggled-off-track-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  &:not(.mdc-switch--checked) .mdc-switch__track {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}
@mixin toggled-off-thumb-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  &:not(.mdc-switch--checked) .mdc-switch__thumb {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
      @include theme-mixins.prop(border-color, $color);
    }
  }
}
@mixin toggled-off-ripple-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-switch--checked) .mdc-switch__thumb-underlay {
    @include ripple-mixins.states($color, false, $query);
  }
}
@mixin density($density-scale, $query: feature-targeting-functions.all()) {
  $size: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: size,
  );
  @include ripple-size($size, $query: $query);
}
@mixin ripple-size($ripple-size, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);


  $tap-target-initial-position:
    -$ripple-size / 2 + variables.$thumb-diameter / 2 - variables.$thumb-offset;


  $native-control-width:
    variables.$track-width +
    ($ripple-size - variables.$thumb-diameter) + variables.$thumb-offset * 2;
  .mdc-switch__thumb-underlay {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(left, $tap-target-initial-position);

      top: -(($ripple-size - variables.$track-height) / 2);
      width: $ripple-size;
      height: $ripple-size;
    }
  }
  .mdc-switch__native-control {
    @include feature-targeting-mixins.targets($feat-structure) {
      width: $native-control-width;
      height: $ripple-size;
    }
  }
}
@mixin ripple-states-opacity($opacity-map: (), $query: feature-targeting-functions.all()) {

  &.mdc-switch .mdc-switch__thumb-underlay {
    @include ripple-mixins.states-opacities($opacity-map, $query: $query);
  }
}
@mixin base_ {
  display: inline-block;
  position: relative;
  outline: none;
  user-select: none;
}
@mixin track_($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    box-sizing: border-box;
    width: variables.$track-width;
    height: variables.$track-height;
    border: 1px solid transparent;
    border-radius: variables.$track-height / 2;
    opacity: .38;
  }
  @include feature-targeting-mixins.targets($feat-animation) {
    transition:
      functions.transition(opacity),
      functions.transition(background-color),
      functions.transition(border-color);
  }
}
@mixin thumb-underlay_($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    transform: translateX(0);
  }
  @include feature-targeting-mixins.targets($feat-animation) {
    transition:
      functions.transition(transform),
      functions.transition(background-color),
      functions.transition(border-color);
  }
}
@mixin native-control_ {
  @include rtl-mixins.reflexive-position(left, 0);
  position: absolute;
  top: 0;
  margin: 0;
  opacity: 0;
  cursor: pointer;
  pointer-events: auto;
}
@mixin thumb_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-color: feature-targeting-functions.create-target($query, color);
  @include elevation-mixins.elevation($z-value: 2, $query: $query);
  @include feature-targeting-mixins.targets($feat-structure) {
    box-sizing: border-box;
    width: variables.$thumb-diameter;
    height: variables.$thumb-diameter;
    border: variables.$thumb-diameter / 2 solid;
    border-radius: 50%;

    pointer-events: none;
    z-index: 1;
  }
}
@mixin track-checked_ {
  opacity: .54;
}
@mixin thumb-underlay-checked_ {
  transform: translateX(variables.$thumb-active-margin);
  @include rtl-mixins.rtl {
    transform: translateX(-(variables.$thumb-active-margin));
  }
}
@mixin native-control-checked_ {

  transform: translateX(-(variables.$thumb-active-margin));
  @include rtl-mixins.rtl {
    transform: translateX(variables.$thumb-active-margin);
  }
}
@mixin disabled-base_ {
  opacity: .38;
  pointer-events: none;
}
@mixin thumb-disabled_ {
  border-width: 1px;
}
@mixin native-control-disabled_ {
  cursor: default;
  pointer-events: none;
}
